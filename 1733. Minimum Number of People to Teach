import java.util.*;

class Solution {
    public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
        int m = languages.length;
        
        // Convert each user's languages into a set for easy lookup
        List<Set<Integer>> langs = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            Set<Integer> set = new HashSet<>();
            for (int lang : languages[i]) {
                set.add(lang);
            }
            langs.add(set);
        }

        // Step 1: Find problematic users
        Set<Integer> problemUsers = new HashSet<>();
        for (int[] f : friendships) {
            int u = f[0] - 1; // convert to 0-based
            int v = f[1] - 1;
            if (Collections.disjoint(langs.get(u), langs.get(v))) {
                problemUsers.add(u);
                problemUsers.add(v);
            }
        }

        // If no problematic users, no teaching needed
        if (problemUsers.isEmpty()) return 0;

        // Step 2: Try teaching each language
        int minTeach = Integer.MAX_VALUE;
        for (int L = 1; L <= n; L++) {
            int count = 0;
            for (int user : problemUsers) {
                if (!langs.get(user).contains(L)) {
                    count++;
                }
            }
            minTeach = Math.min(minTeach, count);
        }

        return minTeach;
    }
}
