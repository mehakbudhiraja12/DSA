/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> result= new ArrayList<>();
        dfs(root,targetSum,new ArrayList<>(),result);
        return result;

    }
    private void dfs(TreeNode node, int remaining, List<Integer> path, List<List<Integer>> result){
        if(node==null){
            return;
        }
        path.add(node.val);
        remaining-=node.val;

        if(node.right==null && node.left==null && remaining==0){
            result.add(new ArrayList<>(path));
        }
        else{
            dfs(node.left,remaining,path,result);
            dfs(node.right,remaining,path,result);
        }
        path.remove(path.size()-1);
    }
}
